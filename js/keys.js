//create a synth and connect it to the master output (your speakers)
// Sound are produced using 'Tone.js' library
const synth = new Tone.Synth().toMaster()

class Ivory extends React.Component{

	constructor(props){
		super(props)

		// Keep reference of key
	    this.keyparent = React.createRef();	
		this.handleStroke = this.handleStroke.bind(this);
		this.removeBubbleTimeout = this.removeBubbleTimeout.bind(this);
		// Keep count of bubbles generated by this key
		this.bubbleCount = 0
	}

	// handler when key is clicked
	handleStroke(e){

		// Generate sound for press of 1/8th of second
		synth.triggerAttackRelease( this.props.key_label , '8n');

		if(this.bubbleCount<3){
			let bub = document.createElement("div");
			bub.classList.add("bubble");
			bub.classList.add("bubble-anim");
			this.bubbleCount += 1

			// Dynamic additon of animation property and scale
			// To give random bubble size and horizontal movement
			bub.style.animation = "animateBubble "+ String(Math.floor(Math.random()*4)+3) +"s linear ,"+
								  " sideWays"+String(Math.floor(Math.random()*6)+1)+
								  " 2s ease-in-out infinite alternate"
			bub.style.transform = "scale("+String(Math.random() * (0.7 - 0.3) + 0.3)+")"
			this.keyparent.current.appendChild(bub);		
			
			// Remove bubbles after amination interval
			setTimeout( this.removeBubbleTimeout , 5000 )

		}
		
	}

	removeBubbleTimeout(){
		if(this.bubbleCount!=0){
			this.keyparent.current.removeChild( this.keyparent.current.childNodes[0] )
			// decrement the counter
			this.bubbleCount -= 1
		}
	}

	render(){

		return (

				<div className="key-set-relative">

					<div ref={this.keyparent} >
					</div>

					<div id={this.props.key_label}  
					onClick={this.handleStroke} className="ivory-key">
						<div className="key-label">{this.props.key_label}</div>
					</div>
					{ this.props.ebony_key && <Ebony key_label={this.props.ebony_key} /> }

				</div>

		)
	}

}

class Ebony extends React.Component{

	constructor(props){
		super(props)
		this.handleStroke = this.handleStroke.bind(this);
	}

	handleStroke(e){
		// Stop click event to bubble to its parent ivory key
		e.stopPropagation();
		// Generate sound
		synth.triggerAttackRelease( this.props.key_label , '8n');
				
	}

	render(){
		return (
			<div id={this.props.key_label} onClick={this.handleStroke} className="ebony-key">
				<div className="key-label">{this.props.key_label}</div>
			</div>
		)
	}

}

export {Ivory,Ebony};
